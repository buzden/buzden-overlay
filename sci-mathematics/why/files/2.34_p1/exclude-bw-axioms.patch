diff --git a/lib/why3/jessie3theories.why b/lib/why3/jessie3theories.why
index 97a9adc..0569798 100644
--- a/lib/why3/jessie3theories.why
+++ b/lib/why3/jessie3theories.why
@@ -386,10 +386,6 @@ function bw_compl int : int
 
 function bw_and int int : int
 
-(* Yannick: added for CVE-2003-0161-min-ok *)
-axiom bw_and_not_null:
-  forall a: int. forall b: int. bw_and a b <> 0 -> a <> 0 /\ b <> 0
-
 function bw_xor int int : int
 
 function bw_or int int : int
@@ -435,90 +431,7 @@ axiom pow2_definition:
   pow2 30 = 1073741824 /\
   pow2 31 = 2147483648
 
-axiom bw_or_plus:
-  forall a: int. forall b: int [bw_or a b, a + b].
-    a >= 0 /\ b >= 0 /\ bw_and a b = 0 -> bw_or a b = a + b
-
-predicate bw_set (pos: int) (n: int) = bw_and (pow2 pos) n <> 0
-
-axiom pow2_bw_set:
-  forall n: int. forall m: int [bw_set n (pow2 m)]. bw_set n (pow2 m) <-> n = m
-
-axiom zero_bw_set:
-  forall n: int [bw_set n 0]. not (bw_set n 0)
-
-axiom zero_bw_set_iff1:
-  forall a: int. forall n: int [bw_set n a]. a = 0 -> not (bw_set n a)
-
-axiom zero_bw_set_iff2:
-  forall a: int. forall n: int [bw_set n a]. bw_set n a -> a <> 0
-
-axiom bw_and_self:
-  forall a: int [bw_and a a].
-    bw_and a a = a
-
-axiom bw_or_self:
-  forall a: int [bw_or a a].
-    bw_or a a = a
-
-axiom bw_and_definition:
-  forall n: int. forall a: int. forall b: int
-    [bw_and a b, bw_set n (bw_and a b), bw_set n a, bw_set n b].
-      bw_set n (bw_and a b) <-> bw_set n a /\ bw_set n b
-
-axiom bw_or_definition:
-  forall n: int. forall a: int. forall b: int
-    [bw_or a b, bw_set n (bw_or a b), bw_set n a, bw_set n b].
-      bw_set n (bw_or a b) <-> bw_set n a \/ bw_set n b
-
-axiom bw_xor_definition:
-  forall n: int. forall a: int. forall b: int
-    [bw_xor a b, bw_set n (bw_xor a b), bw_set n a, bw_set n b].
-      bw_set n (bw_xor a b) <-> not (bw_set n a <-> bw_set n b)
-
-axiom bw_compl_definition:
-  forall n: int. forall a: int [bw_compl a, bw_set n (bw_compl a), bw_set n a].
-     bw_set n (bw_compl a) <-> not (bw_set n a)
-
-axiom bw_and_assoc:
-  forall a: int. forall b: int. forall c: int [bw_and (bw_and a b) c, bw_and a (bw_and b c)].
-    bw_and (bw_and a b) c = bw_and a (bw_and b c)
-
-axiom bw_or_assoc:
-  forall a: int. forall b: int. forall c: int [bw_or (bw_or a b) c, bw_or a (bw_or b c)].
-    bw_or (bw_or a b) c = bw_or a (bw_or b c)
-
-axiom bw_xor_assoc:
-  forall a: int. forall b: int. forall c: int [bw_xor (bw_xor a b) c, bw_xor a (bw_xor b c)].
-    bw_xor (bw_xor a b) c = bw_xor a (bw_xor b c)
-
-axiom bw_and_comm:
-  forall a: int. forall b:int [bw_and a b, bw_and b a].
-    bw_and a b = bw_and b a
-
-axiom bw_or_comm:
-  forall a: int. forall b: int [bw_or a b, bw_or b a].
-    bw_or a b = bw_or b a
-
-axiom bw_xor_comm:
-  forall a: int. forall b: int [bw_xor a b, bw_xor b a].
-    bw_xor a b = bw_xor b a
-
-axiom bw_and_or_distr:
-  forall a: int. forall b: int. forall c: int [bw_and a (bw_or b c), bw_or (bw_and a b) (bw_and a c)].
-    bw_and a (bw_or b c) = bw_or (bw_and a b) (bw_and a c)
-
-axiom bw_or_and_distr:
-  forall a: int. forall b: int. forall c: int [bw_or a (bw_and b c), bw_and (bw_or a b) (bw_or b c)].
-    bw_or a (bw_and b c) = bw_and (bw_or a b) (bw_or a c)
-
-axiom bw_and_mono:
-  forall a: int. forall b: int [bw_and a b].
-    a >= 0 /\ b >= 0 -> bw_and a b <= a /\ bw_and a b <= b
-
-axiom bw_or_mono:
-  forall a: int. forall b: int [bw_or a b].
-    a >= 0 /\ b >= 0 -> bw_or a b >= a /\ bw_or a b >= b
+predicate bw_set (pos: int) (n: int)
 
 (* axioms for arithmetic overflow in bitwise operations *)
 
@@ -532,192 +445,25 @@ function min_short : int = -32768
 function min_int : int = -2147483648
 function min_long : int = -9223372036854775808
 
-axiom bw_compl_nooverflow_signed:
-  forall a : int [bw_compl a].
-      (min_char <= a /\ a <= max_char ->
-        min_char <= bw_compl a /\ bw_compl a <= max_char) /\
-      (min_short <= a /\ a <= max_short ->
-        min_short <= bw_compl a /\ bw_compl a <= max_short) /\
-      (min_int <= a /\ a <= max_int ->
-        min_int <= bw_compl a /\ bw_compl a <= max_int) /\
-      (min_long <= a /\ a <= max_long ->
-        min_long <= bw_compl a /\ bw_compl a <= max_long)
-
-axiom bw_or_nooverflow_signed:
-  forall a : int.
-    forall b : int [bw_or a b].
-      (min_char <= a /\ a <= max_char /\ min_char <= b /\ b <= max_char ->
-        min_char <= bw_or a b /\ bw_or a b <= max_char) /\
-      (min_short <= a /\ a <= max_short /\ min_short <= b /\ b <= max_short ->
-        min_short <= bw_or a b /\ bw_or a b <= max_short) /\
-      (min_int <= a /\ a <= max_int /\ min_int <= b /\ b <= max_int ->
-        min_int <= bw_or a b /\ bw_or a b <= max_int) /\
-      (min_long <= a /\ a <= max_long /\ min_long <= b /\ b <= max_long ->
-        min_long <= bw_or a b /\ bw_or a b <= max_long)
-
-axiom bw_and_nooverflow_signed:
-  forall a : int.
-    forall b : int [bw_and a b].
-      (min_char <= a /\ a <= max_char /\ min_char <= b /\ b <= max_char ->
-        min_char <= bw_and a b /\ bw_and a b <= max_char) /\
-      (min_short <= a /\ a <= max_short /\ min_short <= b /\ b <= max_short ->
-        min_short <= bw_and a b /\ bw_and a b <= max_short) /\
-      (min_int <= a /\ a <= max_int /\ min_int <= b /\ b <= max_int ->
-        min_int <= bw_and a b /\ bw_and a b <= max_int) /\
-      (min_long <= a /\ a <= max_long /\ min_long <= b /\ b <= max_long ->
-        min_long <= bw_and a b /\ bw_and a b <= max_long)
-
-axiom bw_xor_nooverflow_signed:
-  forall a : int.
-    forall b : int [bw_xor a b].
-      (min_char <= a /\ a <= max_char /\ min_char <= b /\ b <= max_char ->
-        min_char <= bw_xor a b /\ bw_xor a b <= max_char) /\
-      (min_short <= a /\ a <= max_short /\ min_short <= b /\ b <= max_short ->
-        min_short <= bw_xor a b /\ bw_xor a b <= max_short) /\
-      (min_int <= a /\ a <= max_int /\ min_int <= b /\ b <= max_int ->
-        min_int <= bw_xor a b /\ bw_xor a b <= max_int) /\
-      (min_long <= a /\ a <= max_long /\ min_long <= b /\ b <= max_long ->
-        min_long <= bw_xor a b /\ bw_xor a b <= max_long)
-
 function max_uchar : int = 255
 function max_ushort : int = 65535
 function max_uint : int = 4294967295
 function max_ulong : int = 18446744073709551615
 
-axiom bw_or_nooverflow_unsigned:
-  forall a : int.
-    forall b : int [bw_or a b].
-      (0 <= a /\ a <= max_uchar /\ 0 <= b /\ b <= max_uchar ->
-        0 <= bw_or a b /\ bw_or a b <= max_uchar) /\
-      (0 <= a /\ a <= max_ushort /\ 0 <= b /\ b <= max_ushort ->
-        0 <= bw_or a b /\ bw_or a b <= max_ushort) /\
-      (0 <= a /\ a <= max_uint /\ 0 <= b /\ b <= max_uint ->
-        0 <= bw_or a b /\ bw_or a b <= max_uint) /\
-      (0 <= a /\ a <= max_ulong /\ 0 <= b /\ b <= max_ulong ->
-        0 <= bw_or a b /\ bw_or a b <= max_ulong)
-
-axiom bw_and_nooverflow_unsigned:
-  forall a : int.
-    forall b : int [bw_and a b].
-      (0 <= a /\ a <= max_uchar /\ 0 <= b /\ b <= max_uchar ->
-        0 <= bw_and a b /\ bw_and a b <= max_uchar) /\
-      (0 <= a /\ a <= max_ushort /\ 0 <= b /\ b <= max_ushort ->
-        0 <= bw_and a b /\ bw_and a b <= max_ushort) /\
-      (0 <= a /\ a <= max_uint /\ 0 <= b /\ b <= max_uint ->
-        0 <= bw_and a b /\ bw_and a b <= max_uint) /\
-      (0 <= a /\ a <= max_ulong /\ 0 <= b /\ b <= max_ulong ->
-        0 <= bw_and a b /\ bw_and a b <= max_ulong)
-
-axiom bw_xor_nooverflow_unsigned:
-  forall a : int.
-    forall b : int [bw_xor a b].
-      (0 <= a /\ a <= max_uchar /\ 0 <= b /\ b <= max_uchar ->
-        0 <= bw_xor a b /\ bw_xor a b <= max_uchar) /\
-      (0 <= a /\ a <= max_ushort /\ 0 <= b /\ b <= max_ushort ->
-        0 <= bw_xor a b /\ bw_xor a b <= max_ushort) /\
-      (0 <= a /\ a <= max_uint /\ 0 <= b /\ b <= max_uint ->
-        0 <= bw_xor a b /\ bw_xor a b <= max_uint) /\
-      (0 <= a /\ a <= max_ulong /\ 0 <= b /\ b <= max_ulong ->
-        0 <= bw_xor a b /\ bw_xor a b <= max_ulong)
-
 (* logical left shift *)
 
 function lsl int int : int
 
-axiom lsl_left_positive_returns_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> 0 <= lsl a (b)
-
-axiom lsl_left_positive_monotone:
-  forall a1:int. forall a2:int. forall b:int.
-    0 <= a1 /\ a1 <= a2 /\ 0 <= b -> lsl a1 b <= lsl a2 b
-
 (* logical right shift *)
 
 function lsr int int : int
 
-axiom lsr_left_positive_returns_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> 0 <= lsr a (b)
-
-axiom lsr_left_positive_decreases:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> lsr a (b) <= a
-
 (* arithmetic right shift *)
 
 function asr int int : int
 
-axiom asr_positive_on_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> 0 <= asr a (b)
-
-axiom asr_decreases_on_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> asr a (b) <= a
-
-(* combining shifts *)
-
-axiom asr_lsr_same_on_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> asr a (b) = lsr a (b)
-
-axiom lsl_of_lsr_decreases_on_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> lsl (lsr a b) b <= a
-
-axiom lsr_of_lsl_identity_on_positive:
-  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> lsr (lsl a b) b = a
-
-(* shifts bitwise definition *)
-
-axiom lsl_definition:
-  forall m: int. forall a: int [lsl a m]. forall n: int
-    [bw_set n (lsl a m), bw_set (n - m) a, n < m].
-      m >= 0 -> not (bw_set n (lsl a m)) <-> not (bw_set (n - m) a) \/ n < m
-
-axiom lsr_definition:
-  forall m: int. forall a: int [lsr a m]. forall n: int
-    [bw_set n (lsr a m), bw_set (n + m) a].
-      m >= 0 -> bw_set n (lsr a m) <-> bw_set (n + m) a
-
-axiom lsl_induction:
-  forall a: int.
-  forall n: int [lsl a n].
-  forall m: int [n + m].
-  forall k: int [lsl a k].
-    k >=0 /\ n >= 0 /\ m >= 0 /\ k = n + m ->
-      lsl a k = lsl (lsl a n) m
-
-axiom lsr_induction:
-  forall a: int.
-  forall n: int [lsr a n].
-  forall m: int [n + m].
-  forall k: int [lsr a k].
-    k >=0 /\ n >= 0 /\ m >= 0 /\ k = n + m ->
-      lsr a k = lsr (lsr a n) m
-
-axiom lsl_assoc:
-  forall n: int.
-  forall m: int.
-  forall a: int [lsl (lsl a m) n, lsl (lsl a n) m].
-    n >= 0 /\ m >= 0 ->
-      lsl (lsl a m) n = lsl (lsl a n) m
-
-axiom lsr_assoc:
-  forall n: int.
-  forall m: int.
-  forall a: int [lsr (lsr a m) n, lsr (lsr a n) m].
-    n >= 0 /\ m >= 0 ->
-      lsr (lsr a m) n = lsr (lsr a n) m
-
-axiom lsl_init:
-  forall a: int [lsl a 1 | a * 2]. a >= 0 -> lsl a 1 = a * 2
-
-axiom lsl_multiply:
-  forall a: int. forall n: int [lsl a n | a * pow2 n]. a >= 0 -> lsl a n = a * pow2 n
-  
 use import int.ComputerDivision
 
-axiom lsr_init:
-  forall a: int [lsr a 1 | div a 2]. a >= 0 -> lsr a 1 = div a 2
-
-axiom lsr_divide:
-  forall a: int. forall n: int [lsr a n | div a (pow2 n)]. a >= 0 -> lsr a n = div a (pow2 n)
-
 (*****************************************************************************)
 (* dynamic allocation/deallocation                                           *)
 (*****************************************************************************)
