Index: new_server_html.c
===================================================================
--- new_server_html.c	(revision 7330)
+++ new_server_html.c	(working copy)
@@ -10618,7 +10618,7 @@
   if (!admin_mode && stop_time > 0) {
     FAIL(NEW_SRV_ERR_CONTEST_ALREADY_FINISHED);
   }
-  if (!admin_mode && serve_check_user_quota(cs, user_id, run_size) < 0) {
+  if (!admin_mode && serve_check_user_quota(cs, prob_id, user_id, run_size) < 0) {
     FAIL(NEW_SRV_ERR_RUN_QUOTA_EXCEEDED);
   }
   if (!admin_mode && !serve_is_problem_started(cs, user_id, prob)) {
@@ -11243,7 +11243,7 @@
     ns_error(log_f, NEW_SRV_ERR_CONTEST_ALREADY_FINISHED);
     goto done;
   }
-  if (serve_check_user_quota(cs, phr->user_id, run_size) < 0) {
+  if (serve_check_user_quota(cs, prob->id, phr->user_id, run_size) < 0) {
     ns_error(log_f, NEW_SRV_ERR_RUN_QUOTA_EXCEEDED);
     goto done;
   }
@@ -12680,7 +12680,13 @@
     do_write_standings(cs, cnts, fout, 1, 1, phr->user_id, 0, 0, 0, 0, 1,
                        cur_time, NULL);
   } else if (global->score_system == SCORE_OLYMPIAD && cs->accepting_mode) {
-    fprintf(fout, _("<p>Information is not available.</p>"));
+    //fprintf(fout, _("<p>Information is not available.</p>"));
+    // Dirty-dirty hack!
+    // Desided to show standings for practicum
+    do_write_kirov_standings(cs, cnts, fout, 0, 1, 1, phr->user_id, 0, 0, 0, 0, 1, cur_time,
+                             0, NULL, 1 /* user_mode */);
+    // do_write_kirov_standings(cs, cnts, fout, 0, 1, 1, 0, 0, 0, 0, 1, cur_time,
+    //                          0, NULL);
   } else if (global->score_system == SCORE_OLYMPIAD) {
     //fprintf(fout, _("<p>Information is not available.</p>"));
     do_write_kirov_standings(cs, cnts, fout, 0, 1, 1, phr->user_id, 0, 0, 0, 0, 1, cur_time,
@@ -14765,7 +14771,7 @@
   if (cs->clients_suspended) FAIL(NEW_SRV_ERR_CLIENTS_SUSPENDED);
   if (!start_time) FAIL(NEW_SRV_ERR_CONTEST_NOT_STARTED);
   if (stop_time) FAIL(NEW_SRV_ERR_CONTEST_ALREADY_FINISHED);
-  if (serve_check_user_quota(cs, phr->user_id, run_size) < 0)
+  if (serve_check_user_quota(cs, prob->id, phr->user_id, run_size) < 0)
     FAIL(NEW_SRV_ERR_RUN_QUOTA_EXCEEDED);
   // problem submit start time
   if (!serve_is_problem_started(cs, phr->user_id, prob))
Index: serve_2.c
===================================================================
--- serve_2.c	(revision 7330)
+++ serve_2.c	(working copy)
@@ -391,16 +391,22 @@
 }
 
 int
-serve_check_user_quota(serve_state_t state, int user_id, size_t size)
+serve_check_user_quota(serve_state_t state, int prob_id, int user_id, size_t size)
 {
   int num;
   size_t total;
+  int run_count;
 
   if (size > state->global->max_run_size) return -1;
   run_get_team_usage(state->runlog_state, user_id, &num, &total);
   if (num >= state->global->max_run_num
       || total + size > state->global->max_run_total)
     return -1;
+  if (!state->probs[prob_id]->max_user_run_count)
+    return 0;
+  run_count = run_get_team_problem_usage(state->runlog_state, user_id, prob_id, state->global->ignore_compile_errors);
+  if (state->probs[prob_id]->max_user_run_count< run_count + 1)
+    return -1;
   return 0;
 }
 
Index: new_server_html_4.c
===================================================================
--- new_server_html_4.c	(revision 7330)
+++ new_server_html_4.c	(working copy)
@@ -964,7 +964,7 @@
       FAIL(NEW_SRV_ERR_CONTEST_NOT_STARTED);
     if (stop_time)
       FAIL(NEW_SRV_ERR_CONTEST_ALREADY_FINISHED);
-    if (serve_check_user_quota(cs, phr->user_id, run_size) < 0)
+    if (serve_check_user_quota(cs, prob->id, phr->user_id, run_size) < 0)
       FAIL(NEW_SRV_ERR_RUN_QUOTA_EXCEEDED);
     if (!serve_is_problem_started(cs, phr->user_id, prob))
       FAIL(NEW_SRV_ERR_PROB_UNAVAILABLE);
Index: runlog.c
===================================================================
--- runlog.c	(revision 7330)
+++ runlog.c	(working copy)
@@ -719,6 +719,28 @@
   if (ps) *ps = sz;
 }
 
+int
+run_get_team_problem_usage(
+	runlog_state_t state,
+	int user_id,
+	int prob_id,
+	int skip_ce_flag)
+{
+  int i, count = 0;
+
+  for (i = 0; i < state->run_u; ++i) {
+    if (state->runs[i].status == RUN_VIRTUAL_START
+	|| state->runs[i].status == RUN_VIRTUAL_STOP
+	|| state->runs[i].status == RUN_EMPTY)
+      continue;	
+    if (state->runs[i].user_id != user_id
+        || (prob_id > 0 && state->runs[i].prob_id != prob_id)) 
+      continue;
+    count++;	
+  }
+  return count;
+}
+
 /* FIXME: VERY DUMB */
 int
 run_get_attempts(
Index: runlog.h
===================================================================
--- runlog.h	(revision 7330)
+++ runlog.h	(working copy)
@@ -163,6 +163,7 @@
 time_t run_get_duration(runlog_state_t);
 
 void run_get_team_usage(runlog_state_t, int, int *, size_t*);
+int run_get_team_problem_usage(runlog_state_t, int, int, int);
 int  run_get_attempts(runlog_state_t, int, int *, int *, int);
 int run_count_all_attempts(runlog_state_t state, int user_id, int prob_id);
 char *run_status_str(int, char *, int, int, int);
Index: serve_state.h
===================================================================
--- serve_state.h	(revision 7330)
+++ serve_state.h	(working copy)
@@ -341,7 +341,7 @@
 void serve_load_status_file(serve_state_t state);
 void serve_remove_status_file(serve_state_t state);
 
-int serve_check_user_quota(serve_state_t, int user_id, size_t size);
+int serve_check_user_quota(serve_state_t, int prob_id, int user_id, size_t size);
 int serve_check_clar_quota(serve_state_t, int user_id, size_t size);
 
 int serve_check_cnts_caps(serve_state_t state, const struct contest_desc *,
Index: new_server_html_2.c
===================================================================
--- new_server_html_2.c	(revision 7330)
+++ new_server_html_2.c	(working copy)
@@ -7173,7 +7173,7 @@
   fprintf(fout, "<th%s>%s</th>", cl, _("Status"));
   if (global->score_system == SCORE_OLYMPIAD && accepting_mode) {
     if (global->disable_passed_tests <= 0) {
-      fprintf(fout, "<th%s>%s</th>", cl, _("Tests passed"));
+      fprintf(fout, "<th%s>%s</th>", cl, _("Failed test"));
     }
   } else if ((global->score_system == SCORE_OLYMPIAD && !accepting_mode)
              || global->score_system == SCORE_KIROV) {
